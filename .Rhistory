library(leaps)
library(glmnet)
library(pROC)
library(rsample)
library(correlation)
library(DataExplorer)
library(knitr)
library(corrplot)
library(regclass)
library(rsample)
library(corrplot)
library(outliers)
library(dplyr)
library(caret)
library(class)
#load the data
data_train <- read_delim("C:/users/Mattia/documents/STATISTICAL_LEARNING/train.csv", delim = ",")
data_test  <- read_delim("C:/users/Mattia/documents/STATISTICAL_LEARNING/test.csv", delim = ",")
#check the data
head(data_train)
names(data_train) <- gsub("\\s", "_", names(data_train))
names(data_test) <- gsub("\\s", "_", names(data_test))
anyNA(data_train)
anyNA(data_test)
colSums(is.na(data_train))
data_train <- na.omit(data_train)
data_test <- na.omit(data_test)
library("reshape2")
corrmat <- cor(data_train)
data_train <- read_delim("C:/users/Mattia/documents/STATISTICAL_LEARNING/train.csv", delim = ",")
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(tidymodels)
library(leaps)
library(glmnet)
library(pROC)
library(rsample)
library(correlation)
library(DataExplorer)
library(knitr)
library(corrplot)
library(regclass)
library(rsample)
library(corrplot)
library(outliers)
library(dplyr)
library(caret)
library(class)
head(data_train)
head(data_train)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(tidymodels)
library(leaps)
library(glmnet)
library(pROC)
library(rsample)
library(correlation)
library(DataExplorer)
library(knitr)
library(corrplot)
library(regclass)
library(rsample)
library(corrplot)
library(outliers)
library(dplyr)
library(caret)
library(class)
#load the data
data_train <- read_delim("C:/users/Mattia/documents/STATISTICAL_LEARNING/train.csv", delim = ",")
data_test  <- read_delim("C:/users/Mattia/documents/STATISTICAL_LEARNING/test.csv", delim = ",")
#check the data
head(data_train)
names(data_train) <- gsub("\\s", "_", names(data_train))
names(data_test) <- gsub("\\s", "_", names(data_test))
anyNA(data_train)
anyNA(data_test)
colSums(is.na(data_train))
data_train <- na.omit(data_train)
data_test <- na.omit(data_test)
library("reshape2")
corrmat <- cor(data_train)
head(data_train)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(tidymodels)
library(leaps)
library(glmnet)
library(pROC)
library(rsample)
library(correlation)
library(DataExplorer)
library(knitr)
library(corrplot)
library(regclass)
library(rsample)
library(corrplot)
library(outliers)
library(dplyr)
library(caret)
library(class)
data_train <- read_delim("C:/users/Mattia/documents/STATISTICAL_LEARNING/train.csv", delim = ",")
data_test  <- read_delim("C:/users/Mattia/documents/STATISTICAL_LEARNING/test.csv", delim = ",")
names(data_train) <- gsub("\\s", "_", names(data_train))
names(data_test) <- gsub("\\s", "_", names(data_test))
data_train$train <- 1
data_test$train <- 0
data <- rbind(data_train, data_test)
data(head)
data = merge(data_train, data_test, by='common_column_name')
data <- rbind(data_train, data_test)
data_train$train <- 1
data_test$train <- 0
data <- rbind(data_train, data_test)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(tidymodels)
library(leaps)
library(glmnet)
library(pROC)
library(rsample)
library(correlation)
library(DataExplorer)
library(knitr)
library(corrplot)
library(regclass)
library(rsample)
library(corrplot)
library(outliers)
library(dplyr)
library(caret)
library(class)
#load the data
data_train <- read_delim("C:/users/Mattia/documents/STATISTICAL_LEARNING/train.csv", delim = ",")
data_test  <- read_delim("C:/users/Mattia/documents/STATISTICAL_LEARNING/test.csv", delim = ",")
#check the data
head(data_train)
names(data_train) <- gsub("\\s", "_", names(data_train))
names(data_test) <- gsub("\\s", "_", names(data_test))
data <- rbind(data_train, data_test)
data <- rbind(data_train, data_test)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(tidymodels)
library(leaps)
library(glmnet)
library(pROC)
library(rsample)
library(correlation)
library(DataExplorer)
library(knitr)
library(corrplot)
library(regclass)
library(rsample)
library(corrplot)
library(outliers)
library(dplyr)
library(caret)
library(class)
#load the data
data_train <- read_delim("C:/users/Mattia/documents/STATISTICAL_LEARNING/train.csv", delim = ",")
data_test  <- read_delim("C:/users/Mattia/documents/STATISTICAL_LEARNING/test.csv", delim = ",")
#check the data
head(data_train)
data <- rbind(data_train, data_test)
head(data)
dim(data)
dim(data_train)
dim(data_test)
names(data) <- gsub("\\s", "_", names(data))
head(data)
#change name of arrival_delay_in_minutes to arrival_delay_min
names(data)[names(data) == "arrival_delay_in_minutes"] <- "arrival_delay_min"
#change name of departure_delay_in_minutes to departure_delay_min
names(data)[names(data) == "departure_delay_in_minutes"] <- "departure_delay_min"
summarise(data)
#delete first two columns, # and ID
data <- data[,-c(1,2)]
head(data)
summary(data)
install.packages("rmarkdown")
install.packages(rtools)
install.packages("rmarkdown")
library(rmarkdown)
---
title: "Statistical Project"
---
title: "Statistical Project"
install.packages("correlation")
install.packages("reshape")
setwd("C:/Users/Mattia/Documents/GitHub/stat_project")
source("~/GitHub/stat_project/analysis.r")
hist(train$Type_of_Travel, breaks = 2, col = "blue", xlab = "Type_of_Travel", main = "Type_of_Travel - Density Plot")
hist(train$Type_of_Travel, breaks = c(0, 0.5, 1), col = "blue", xlab = "Type_of_Travel", main = "Type_of_Travel - Density Plot")
hist(train$Type_of_Travel, breaks = c(0, 0.5, 1), col = "blue", xlab = "Type_of_Travel", main = "Type_of_Travel - Density Plot")
a = ggplot(train, aes(x = Type_of_Travel, fill = sat)) +
geom_histogram(fill = 'Blue', alpha = 0.4, bins = 2)
hist(train$Type_of_Travel, breaks = c(-0.5, 0.5, 1.5), col = "blue", xlab = "Type_of_Travel", main = "Type_of_Travel - Density Plot")
hist(train$Type_of_Travel, breaks = 2, col = "blue", xlab = "Type_of_Travel", main = "Type_of_Travel - Density Plot")
# Create a new categorical variable with two levels based on Type_of_Travel
train$Type_of_Travel_Bins <- cut(train$Type_of_Travel, breaks = c(-Inf, 0.5, Inf), labels = c("0", "1"))
# Plot the histogram using the new variable
hist(train$Type_of_Travel_Bins, col = "blue", xlab = "Type_of_Travel", main = "Type_of_Travel - Density Plot")
# Create a new categorical variable with two levels based on Type_of_Travel
train$Type_of_Travel_Bins <- cut(train$Type_of_Travel, breaks = c(-1,5, 0.5, +1.5), labels = c("0", "1"))
# Create a new categorical variable with two levels based on Type_of_Travel
train$Type_of_Travel_Bins <- cut(train$Type_of_Travel, breaks = 2, labels = c("0", "1"))
# Plot the histogram using the new variable
hist(train$Type_of_Travel_Bins, col = "blue", xlab = "Type_of_Travel", main = "Type_of_Travel - Density Plot")
# Plot the histogram with specified breaks
hist(train$Type_of_Travel, breaks = c(0, 0.5, 1), col = "blue", xlab = "Type_of_Travel", main = "Type_of_Travel - Density Plot")
# Converti la variabile Type_of_Travel in un fattore con le etichette desiderate
train$Type_of_Travel <- factor(train$Type_of_Travel, levels = c(0, 1), labels = c("Personal", "Business"))
# Plot dell'istogramma con gli etichette 0 e 1 sull'asse x
hist(train$Type_of_Travel, col = "blue", xlab = "Type_of_Travel", main = "Type_of_Travel - Density Plot")
# Conta la frequenza dei valori di Type_of_Travel
frequency <- table(train$Type_of_Travel)
# Crea un grafico a barre
barplot(frequency, col = "blue", xlab = "Type_of_Travel", ylab = "Frequency", main = "Type_of_Travel - Frequency Plot")
# import libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(correlation)
library(reshape)
library(reshape2)
data_train = read.csv("train.csv")
data_test = read.csv("test.csv")
# merge train and test data
data = rbind(data_train, data_test)
attach(data)
# DATA PREPROCESSING
# replace dots with underscores in column names
names(data) = gsub("\\.", "_", names(data))
# drop X and id column
data = data %>% select(-X, -id)
# convert categorical features to factor
data$Gender = factor(data$Gender, levels = c("Male", "Female"))
data$Customer_Type = factor(data$Customer_Type, levels = c("Loyal Customer", "disloyal Customer"))
data$Type_of_Travel = factor(data$Type_of_Travel, levels = c("Personal Travel", "Business travel"))
data$Class = factor(data$Class, levels = c("Business", "Eco Plus", "Eco"))
data$satisfaction = factor(data$satisfaction, levels = c("neutral or dissatisfied", "satisfied"))
######################################################
#   HANDLING NA VALUES
# list features with na values
prop.table(colSums(is.na(data)))
# Arrival_Delay_in_Minutes has na values, proportion of na values
prop.table(table(is.na(data$Arrival_Delay_in_Minutes)))
# na values are only 0.03% of the data -> drop na values
data = data %>% drop_na(Arrival_Delay_in_Minutes)
######################################################Ã 
#   VISUALIZATION
# plot distribution of categorical variables
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
plot = ggplot(data, aes(x = .data[[col]], fill = .data[[col]])) +
geom_bar() +
labs(title = paste("Histogram of", col), x = col, y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
##################
# plot distribution of numeric variables
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
plot = ggplot(data, aes(x = .data[[col]])) +
geom_histogram() +
labs(title = col, x = col, y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 3)
##################
# plots categorical variables vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
if (col == "satisfaction") {
next
}
plot = ggplot(data, aes(x = satisfaction, fill = .data[[col]])) +
geom_bar(position = "dodge") +
scale_fill_manual(values = rainbow(length(unique(data[[col]]))),
labels = unique(data[[col]]),
name = col) +
labs(title = paste("Histogram of Satisfaction by", col), x = "Satisfaction", y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
##################
# plots numeric variables vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
if (col == "satisfaction") {
next
}
plot = ggplot(data, aes(x = satisfaction, y = .data[[col]])) +
geom_boxplot() +
labs(x = "Satisfaction", y = col)
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 4)
#############################################
#   CONVERT CATEGORICAL TO NUMERIC
data$Gender = as.numeric(data$Gender) - 1
data$Customer_Type = as.numeric(data$Customer_Type) - 1
data$Type_of_Travel = as.numeric(data$Type_of_Travel) - 1
data$Class = as.numeric(data$Class) - 1
data$satisfaction = as.numeric(data$satisfaction) - 1
#############################################
#   DATA BALANCE
prop.table(table(data$satisfaction))
##############################################
#  TRAIN TEST SPLIT
set.seed(123)
train_index = sample(1:nrow(data), 0.8*nrow(data))
# 80% of data is used for training
train = data[train_index,]
# 20% of data is used for testing
test = data[-train_index,]
# merge train and test data
data = rbind(train, test)
#save on cvs
write.csv(data, file = "data.csv")
# save true values of test satisfaction column
test_true = test$satisfaction
# drop satisfaction column from test data
test = test %>% select(-satisfaction)
# print proportion of satisfied and dissatisfied customers in train and test data
prop.table(table(train$satisfaction))
prop.table(table(test_true))
##############################################
# CORRELATION MATRIX
# correlation matrix only for numeric variables
correlation_matrix = cor(data[, sapply(data, is.numeric)])
# Plot a heatmap of the correlation matrix
ggplot(data = reshape2::melt(correlation_matrix)) +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
scale_fill_gradient2(low = "blue", mid = "white", high = "red",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Correlation") +
theme(axis.text.x = element_text(angle = 90, vjust = 1,
size = 10, hjust = 1)) +
coord_fixed()
# Find high correlated features with satisfaction
# TODO: do the same with different threshold to find differences
# NOTE: i decided to use 0.3 as threshold
satisfaction_corr <- correlation_matrix['satisfaction',]
high_corr_satis <- names(satisfaction_corr[abs(satisfaction_corr) > 0.3 | abs(satisfaction_corr) < -0.3])
high_corr_satis <- high_corr_satis[high_corr_satis != "satisfaction"]
high_corr_satis
# Compute the correlations between the high correlation features and satisfaction
correlations <- data.frame(
feature = high_corr_satis,
correlation = sapply(high_corr_satis, function(x) cor(data[,x], data$satisfaction))
)
correlations
# plot the correlations
ggplot(correlations, aes(x = reorder(feature, correlation), y = correlation)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.4) +
ggtitle("Correlation between features and satisfaction") +
xlab('Features') +
ylab('Correlation')
#save on cvs
write.csv(correlations, file = "correlations.csv")
##############################################
# PLOT ALL DISTRIBUTIONS (with numerical categories)
sat = data$satisfaction
features_names = names(data)
num_cols = 4
num_rows = ceiling(ncol(data)/num_cols)
par(mfrow = c(num_rows, num_cols))
# for each feature plot the density of satisfied and dissatisfied customers
for(col in features_names) {
# calculate number of breaks
num_breaks = length(unique(data[[col]]))
num_breaks = min(num_breaks, 20)
hist(data[[col]], breaks = num_breaks,
main = paste("Histogram of ", col), xlab = col, ylab = "Frequency",
col = "lightblue"
)
}
#plot the density of columns of data which names are in correlations. Use barplots.
#TODO: make them visually right.
#DONE
# Count frequence of value of Type_of_Travel
frequency <- table(train$Type_of_Travel)
# Create a barplot
barplot(frequency, col = "blue", xlab = "Type_of_Travel", ylab = "Frequency", main = "Type_of_Travel - Frequency Plot")
a = ggplot(train, aes(x = Type_of_Travel, fill = sat)) +
geom_histogram(fill = 'Blue', alpha = 0.4, bins = 2)
b = ggplot(train, aes(x = Class, fill = sat)) +
geom_bar(fill = 'Blue', alpha = 0.4) +
ggtitle("Class - Density Plot") +
xlab('Class')
c = ggplot(train, aes(x = Online_boarding, fill = sat)) +
geom_bar(fill = 'Blue', alpha = 0.4) +
ggtitle("Online_boarding - Density Plot") +
xlab('Online_boarding')
d = ggplot(train, aes(x = Seat_comfort, fill = sat)) +
geom_bar(fill = 'Blue', alpha = 0.4) +
ggtitle("Seat_comfort - Density Plot") +
xlab('Seat_comfort')
e = ggplot(train, aes(x = Inflight_entertainment, fill = sat)) +
geom_bar(fill = 'Blue', alpha = 0.4) +
ggtitle("Inflight_entertainment - Density Plot") +
xlab('Inflight_entertainment')
f = ggplot(train, aes(x = On_board_service, fill = sat)) +
geom_bar(fill = 'Blue', alpha = 0.4) +
ggtitle("On_board_service - Density Plot") +
xlab('On_board_service')
g = ggplot(train, aes(x = Leg_room_service, fill = sat)) +
geom_bar(fill = 'Blue', alpha = 0.4) +
ggtitle("Leg_room_service - Density Plot") +
xlab('Leg_room_service')
h = ggplot(train, aes(x = Cleanliness, fill = sat)) +
geom_bar(fill = 'Blue', alpha = 0.4) +
ggtitle("Cleanliness - Density Plot") +
xlab('Cleanliness')
grid.arrange(a, b, c, d, e, f, g, h, ncol = )
#CORRELATION MATRIX again but now we are interested in partial correlation
#So we look for all the correlations between variables
#We pick the highest, setting a treshold of our choice
#build a dataframe where for each variable we look the partial correlation with all the others
#we pick the highest and we save it in a dataframe
#we set a treshold of 0
#correlation(train, partial=TRUE, method='pearson')
#save the partial correlation matrix result in a dataframe and output a file for further analysis
#partial_corr <- correlation(train, partial=TRUE, method='pearson')
#write.csv(partial_corr, file = "partial_corr.csv")
partial_correlations = read.csv("partial_corr.csv", header = TRUE, sep = ",")
#make the first column the row names
rownames(partial_correlations) = partial_correlations[,1]
colnames(partial_correlations)
#drop the first  (X) column
partial_correlations = partial_correlations[,-1]
# Create a new matrix with rounded partial correlations
partial_correlations_rounded <- round(partial_correlations, digits = 3)
# Initialize empty data frame with 0 rows
# We need it to create a data frame with the results and
# so to show better the correlations.
df <- data.frame(variable1 = character(),
variable2 = character(),
value = numeric(),
stringsAsFactors = FALSE)
# Loop over rows and columns of matrix
for (i in 1:nrow(partial_correlations_rounded)) {
for (j in 1:ncol(partial_correlations_rounded)) {
print(partial_correlations_rounded[i,j])
# Check if value meets criterion
if ((partial_correlations_rounded[i,j] > 0.300 | partial_correlations_rounded[i,j] < -0.300)& i != j) {
print('it is true')
# Add row to data frame
df <- rbind(df, data.frame(variable1 = rownames(partial_correlations_rounded)[i],
variable2 = colnames(partial_correlations_rounded)[j],
value = partial_correlations_rounded[i,j],
stringsAsFactors = FALSE))
}
}
}
# Group the data frame by variable1 and extract top 3 values for each group
df_top3 <- df %>% group_by(variable1) %>% top_n(4, value) %>% ungroup()
#order by variable1
df_top3 <- df_top3[order(df_top3$variable1),]
#delete duplicates in the dataframe if variable1 is equal to variable2
df_top3 <- df_top3[!(df_top3$variable1 == df_top3$variable2),]
print(df_top3, n = nrow(df_top3))
#save on cvs
write.csv(df_top3, file = "df_top3.csv")
#TODO:EXPLAIN THE CORRELATIONS AND PLOTTING THE RESULTS
par(mfrow = c(1, 1))
### Relation between Arrival_Delay_in_Minutes and Departure_Delay_in_Minutes (linear)
# standardize Arrival_Delay_in_Minutes and Departure_Delay_in_Minutes
arrival_std = scale(data$Arrival_Delay_in_Minutes)
departure_std = scale(data$Departure_Delay_in_Minutes)
# scatter plot of Arrival_Delay_in_Minutes and Departure_Delay_in_Minutes
plot(arrival_std, departure_std, xlab = "Arrival_Delay_in_Minutes", ylab = "Departure_Delay_in_Minutes")
# plot line y = x
abline(0, 1, col = "red")
### Relationship between Class (Business, Eco, Eco Plus) and Type of travel (Personal Travel, Business Travel)
# plot barplot coloured for each type of class vs type of travel
ggplot(data, aes(x = Class, fill = Type_of_Travel)) +
geom_bar(position = "dodge") +
labs(title = "Histogram of Class by Type of Travel", x = "Class", y = "Count")
#LOGISTIC REGRESSION MODELS
# Fit the logistic regression model
features = colnames(partial_correlations)
model <- glm(formula = formula("satisfaction ~  -Gender -Customer_type -Age -Type_of_Travel"), data = train, family = binomial)
#LOGISTIC REGRESSION MODELS
# Fit the logistic regression model
features = colnames(partial_correlations)
model <- glm(formula = formula("satisfaction ~  -Gender -Customer.type -Age -Type.of.Travel"), data = train, family = binomial)
data.
model <- glm(formula = formula("satisfaction ~  -Gender -Customer.type -Age -Type.of.Travel"), data = train, family = binomial)
model <- glm(formula = formula("satisfaction ~  -Gender -Customer_type -Age -Type.of.Travel"), data = train, family = binomial)
names(train)
source("~/GitHub/stat_project/analysis.r")
model <- glm(formula = formula("satisfaction ~  -Gender -Customer_type -Age -Type_of_Travel"), data = train, family = binomial)
#LOGISTIC REGRESSION MODELS
# Fit the logistic regression model
features = colnames(partial_correlations)
model <- glm(formula = formula("satisfaction ~  -Gender -Customer_type -Age -Type_of_Travel"), data = train, family = binomial)
model <- glm(formula = formula("satisfaction ~  -Gender -Customer_Type -Age -Type_of_Travel"), data = train, family = binomial)
# View the model summary
summary(model)
source("~/GitHub/stat_project/analysis.r")
installr
pacman
