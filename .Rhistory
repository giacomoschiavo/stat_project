# 80% of data is used for training
train_data = data[train_index,]
# 20% of data is used for testing
test_data = data[-train_index,]
# merge train and test data
data = rbind(train_data, test_data)
# Seperate y_train and y_test for further use
X_train = as.matrix(train_data %>% select(-satisfaction))
y_train = train_data$satisfaction
X_test = as.matrix(test_data %>% select(-satisfaction))
y_test = test_data$satisfaction
# list features with na values
prop.table(colSums(is.na(train_data)))
# list features with na values
prop.table(colSums(is.na(data)))
data_train = read.csv("train.csv")
data_test = read.csv("test.csv")
# merge train and test data
data = rbind(data_train, data_test)
attach(data)
# replace dots with underscores in column names
names(data) = gsub("\\.", "_", names(data))
# drop X and id column
data = data %>% select(-X, -id)
names(data)
# convert categorical features to factor
data$Gender = as.factor(data$Gender)
data$Customer_Type = as.factor(data$Customer_Type)
data$Type_of_Travel = as.factor(data$Type_of_Travel)
data$Class = as.factor(data$Class)
data$satisfaction = as.factor(data$satisfaction)
ratings_fts_names = c("Inflight_wifi_service", "Departure_Arrival_time_convenient",
"Ease_of_Online_booking", "Gate_location", "Food_and_drink", "Online_boarding",
"Seat_comfort", "Inflight_entertainment", "On_board_service", "Leg_room_service",
"Baggage_handling", "Checkin_service", "Inflight_service", "Cleanliness", "On_board_service")
for (col in ratings_fts_names) {
data[[col]] = as.factor(data[[col]])
}
# na values are only 0.03% of the data -> drop na values
data = data %>% drop_na(Arrival_Delay_in_Minutes)
# compute the mean value of all the ratings, ignoring NA values
ratings_data = data[, c(ratings_fts_names)]
ratings_data <- apply(ratings_data, 2, as.numeric)
# 1. ratings mean
data$ratings_mean = rowMeans(ratings_data, na.rm = TRUE)
# 2. onboard rating mean
onboard_features = c("Inflight_wifi_service", "Food_and_drink",
"Seat_comfort", "Inflight_entertainment", "On_board_service", "Leg_room_service",
"Baggage_handling", "Inflight_service", "Cleanliness")
data$onboard_rating_mean = rowMeans(ratings_data[, onboard_features], na.rm = TRUE)
# list features with na values
prop.table(colSums(is.na(data)))
data_train = read.csv("train.csv")
data_test = read.csv("test.csv")
# merge train and test data
data = rbind(data_train, data_test)
attach(data)
# replace dots with underscores in column names
names(data) = gsub("\\.", "_", names(data))
# drop X and id column
data = data %>% select(-X, -id)
names(data)
# convert categorical features to factor
data$Gender = as.factor(data$Gender)
data$Customer_Type = as.factor(data$Customer_Type)
data$Type_of_Travel = as.factor(data$Type_of_Travel)
data$Class = as.factor(data$Class)
data$satisfaction = as.factor(data$satisfaction)
ratings_fts_names = c("Inflight_wifi_service", "Departure_Arrival_time_convenient",
"Ease_of_Online_booking", "Gate_location", "Food_and_drink", "Online_boarding",
"Seat_comfort", "Inflight_entertainment", "On_board_service", "Leg_room_service",
"Baggage_handling", "Checkin_service", "Inflight_service", "Cleanliness", "On_board_service")
for (col in ratings_fts_names) {
data[[col]] = as.factor(data[[col]])
}
# na values are only 0.03% of the data -> drop na values
data = data %>% drop_na(Arrival_Delay_in_Minutes)
# list features with na values
prop.table(colSums(is.na(data)))
# na values are only 0.03% of the data -> drop na values
data = data %>% drop_na(Arrival_Delay_in_Minutes)
# list features with na values
prop.table(colSums(is.na(data)))
data_train = read.csv("train.csv")
data_test = read.csv("test.csv")
# merge train and test data
data = rbind(data_train, data_test)
attach(data)
# list features with na values
prop.table(colSums(is.na(data)))
# replace dots with underscores in column names
names(data) = gsub("\\.", "_", names(data))
# drop X and id column
data = data %>% select(-X, -id)
names(data)
# list features with na values
prop.table(colSums(is.na(data)))
# convert categorical features to factor
data$Gender = as.factor(data$Gender)
data$Customer_Type = as.factor(data$Customer_Type)
data$Type_of_Travel = as.factor(data$Type_of_Travel)
data$Class = as.factor(data$Class)
data$satisfaction = as.factor(data$satisfaction)
ratings_fts_names = c("Inflight_wifi_service", "Departure_Arrival_time_convenient",
"Ease_of_Online_booking", "Gate_location", "Food_and_drink", "Online_boarding",
"Seat_comfort", "Inflight_entertainment", "On_board_service", "Leg_room_service",
"Baggage_handling", "Checkin_service", "Inflight_service", "Cleanliness", "On_board_service")
for (col in ratings_fts_names) {
data[[col]] = as.factor(data[[col]])
}
# list features with na values
prop.table(colSums(is.na(data)))
# list features with na values
prop.table(colSums(is.na(data)))
# Arrival_Delay_in_Minutes has na values, proportion of na values
prop.table(table(is.na(data$Arrival_Delay_in_Minutes)))
# na values are only 0.03% of the data -> drop na values
data = data %>% drop_na(Arrival_Delay_in_Minutes)
# list features with na values
prop.table(colSums(is.na(data)))
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(correlation)
library(reshape)
library(reshape2)
library(tidyverse) # for data manipulation
library(ggplot2) # for plotting
library(gridExtra) # for grid.arrange
library(regclass) # for VIF package
library(MLmetrics) # to create confusion matrix
library(pROC) # for ROC Curve
library(e1071) # for Naive Bayes Classifier
library(class)
library(caret)
library(glmnet) # for Lasso Regression
data_train = read.csv("train.csv")
data_test = read.csv("test.csv")
# merge train and test data
data = rbind(data_train, data_test)
attach(data)
summary(data)
prop.table(table(data$satisfaction))
table(data$Gender)
table(data$Customer.Type)
table(data$Type.of.Travel)
table(data$Class)
table(data$satisfaction)
# convert categorical features to factor
data$Gender = as.factor(data$Gender)
data$Customer_Type = as.factor(data$Customer_Type)
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(correlation)
library(reshape)
library(reshape2)
library(tidyverse) # for data manipulation
library(ggplot2) # for plotting
library(gridExtra) # for grid.arrange
library(regclass) # for VIF package
library(MLmetrics) # to create confusion matrix
library(pROC) # for ROC Curve
library(e1071) # for Naive Bayes Classifier
library(class)
library(caret)
library(glmnet) # for Lasso Regression
data_train = read.csv("train.csv")
data_test = read.csv("test.csv")
# merge train and test data
data = rbind(data_train, data_test)
attach(data)
summary(data)
prop.table(table(data$satisfaction))
table(data$Gender)
table(data$Customer.Type)
table(data$Type.of.Travel)
table(data$Class)
table(data$satisfaction)
# replace dots with underscores in column names
names(data) = gsub("\\.", "_", names(data))
# drop X and id column
data = data %>% select(-X, -id)
names(data)
# convert categorical features to factor
data$Gender = as.factor(data$Gender)
data$Customer_Type = as.factor(data$Customer_Type)
data$Type_of_Travel = as.factor(data$Type_of_Travel)
data$Class = as.factor(data$Class)
data$satisfaction = as.factor(data$satisfaction)
ratings_fts_names = c("Inflight_wifi_service", "Departure_Arrival_time_convenient",
"Ease_of_Online_booking", "Gate_location", "Food_and_drink", "Online_boarding",
"Seat_comfort", "Inflight_entertainment", "On_board_service", "Leg_room_service",
"Baggage_handling", "Checkin_service", "Inflight_service", "Cleanliness", "On_board_service")
for (col in ratings_fts_names) {
data[[col]] = as.factor(data[[col]])
}
# list features with na values
prop.table(colSums(is.na(data)))
# na values are only 0.03% of the data -> drop na values
# Check for missing values in "Arrival_Delay_in_Minutes"
sum(is.na(data$Arrival_Delay_in_Minutes))
# na values are only 0.03% of the data -> drop na values
# Check for missing values in "Arrival_Delay_in_Minutes"
sum(is.na(data$Arrival_Delay_in_Minutes))
data$Arrival_Delay_in_Minutes <- replace_na(data$Arrival_Delay_in_Minutes, 0)
# list features with na values
prop.table(colSums(is.na(data)))
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(correlation)
library(reshape)
library(reshape2)
library(tidyverse) # for data manipulation
library(ggplot2) # for plotting
library(gridExtra) # for grid.arrange
library(regclass) # for VIF package
library(MLmetrics) # to create confusion matrix
library(pROC) # for ROC Curve
library(e1071) # for Naive Bayes Classifier
library(class)
library(caret)
library(glmnet) # for Lasso Regression
data_train = read.csv("train.csv")
data_test = read.csv("test.csv")
# merge train and test data
data = rbind(data_train, data_test)
attach(data)
summary(data)
prop.table(table(data$satisfaction))
table(data$Gender)
table(data$Customer.Type)
table(data$Type.of.Travel)
table(data$Class)
table(data$satisfaction)
# replace dots with underscores in column names
names(data) = gsub("\\.", "_", names(data))
# drop X and id column
data = data %>% select(-X, -id)
names(data)
# convert categorical features to factor
data$Gender = as.factor(data$Gender)
data$Customer_Type = as.factor(data$Customer_Type)
data$Type_of_Travel = as.factor(data$Type_of_Travel)
data$Class = as.factor(data$Class)
data$satisfaction = as.factor(data$satisfaction)
data$Arrival_Delay_in_Minutes <- as.numeric(data$Arrival_Delay_in_Minutes)
ratings_fts_names = c("Inflight_wifi_service", "Departure_Arrival_time_convenient",
"Ease_of_Online_booking", "Gate_location", "Food_and_drink", "Online_boarding",
"Seat_comfort", "Inflight_entertainment", "On_board_service", "Leg_room_service",
"Baggage_handling", "Checkin_service", "Inflight_service", "Cleanliness", "On_board_service")
for (col in ratings_fts_names) {
data[[col]] = as.factor(data[[col]])
}
# list features with na values
prop.table(colSums(is.na(data)))
# na values are only 0.03% of the data -> drop na values
# Check for missing values in "Arrival_Delay_in_Minutes"
sum(is.na(data$Arrival_Delay_in_Minutes))
data$Arrival_Delay_in_Minutes <- replace_na(data$Arrival_Delay_in_Minutes, 0)
# list features with na values
prop.table(colSums(is.na(data)))
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(correlation)
library(reshape)
library(reshape2)
library(tidyverse) # for data manipulation
library(ggplot2) # for plotting
library(gridExtra) # for grid.arrange
library(regclass) # for VIF package
library(MLmetrics) # to create confusion matrix
library(pROC) # for ROC Curve
library(e1071) # for Naive Bayes Classifier
library(class)
library(caret)
library(glmnet) # for Lasso Regression
data_train = read.csv("train.csv")
data_test = read.csv("test.csv")
# merge train and test data
data = rbind(data_train, data_test)
attach(data)
summary(data)
prop.table(table(data$satisfaction))
table(data$Gender)
table(data$Customer.Type)
table(data$Type.of.Travel)
table(data$Class)
table(data$satisfaction)
# replace dots with underscores in column names
names(data) = gsub("\\.", "_", names(data))
# drop X and id column
data = data %>% select(-X, -id)
names(data)
# convert categorical features to factor
data$Gender = as.factor(data$Gender)
data$Customer_Type = as.factor(data$Customer_Type)
data$Type_of_Travel = as.factor(data$Type_of_Travel)
data$Class = as.factor(data$Class)
data$satisfaction = as.factor(data$satisfaction)
data$Arrival_Delay_in_Minutes <- as.numeric(data$Arrival_Delay_in_Minutes)
ratings_fts_names = c("Inflight_wifi_service", "Departure_Arrival_time_convenient",
"Ease_of_Online_booking", "Gate_location", "Food_and_drink", "Online_boarding",
"Seat_comfort", "Inflight_entertainment", "On_board_service", "Leg_room_service",
"Baggage_handling", "Checkin_service", "Inflight_service", "Cleanliness", "On_board_service")
for (col in ratings_fts_names) {
data[[col]] = as.factor(data[[col]])
}
# Arrival_Delay_in_Minutes has na values, proportion of na values
prop.table(table(is.na(data$Arrival_Delay_in_Minutes)))
# na values are only 0.03% of the data -> drop na values
# Check for missing values in "Arrival_Delay_in_Minutes"
sum(is.na(data$Arrival_Delay_in_Minutes))
print(class(data$Arrival_Delay_in_Minutes))
is.na(data$Arrival_Delay_in_Minutes)
test = replace_na(data$Arrival_Delay_in_Minutes, 0)
summary(test)
data$Arrival_Delay_in_Minutes <- test
summary(data$Arrival_Delay_in_Minutes)
# Arrival_Delay_in_Minutes has na values, proportion of na values
prop.table(table(is.na(data$Arrival_Delay_in_Minutes)))
# list features with na values
prop.table(colSums(is.na(data)))
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(correlation)
library(reshape)
library(reshape2)
library(tidyverse) # for data manipulation
library(ggplot2) # for plotting
library(gridExtra) # for grid.arrange
library(regclass) # for VIF package
library(MLmetrics) # to create confusion matrix
library(pROC) # for ROC Curve
library(e1071) # for Naive Bayes Classifier
library(class)
library(caret)
library(glmnet) # for Lasso Regression
data_train = read.csv("train.csv")
data_test = read.csv("test.csv")
# merge train and test data
data = rbind(data_train, data_test)
attach(data)
summary(data)
prop.table(table(data$satisfaction))
table(data$Gender)
table(data$Customer.Type)
table(data$Type.of.Travel)
table(data$Class)
table(data$satisfaction)
# replace dots with underscores in column names
names(data) = gsub("\\.", "_", names(data))
# drop X and id column
data = data %>% select(-X, -id)
names(data)
# convert categorical features to factor
data$Gender = as.factor(data$Gender)
data$Customer_Type = as.factor(data$Customer_Type)
data$Type_of_Travel = as.factor(data$Type_of_Travel)
data$Class = as.factor(data$Class)
data$satisfaction = as.factor(data$satisfaction)
data$Arrival_Delay_in_Minutes <- as.numeric(data$Arrival_Delay_in_Minutes)
ratings_fts_names = c("Inflight_wifi_service", "Departure_Arrival_time_convenient",
"Ease_of_Online_booking", "Gate_location", "Food_and_drink", "Online_boarding",
"Seat_comfort", "Inflight_entertainment", "On_board_service", "Leg_room_service",
"Baggage_handling", "Checkin_service", "Inflight_service", "Cleanliness", "On_board_service")
for (col in ratings_fts_names) {
data[[col]] = as.factor(data[[col]])
}
# list features with na values
prop.table(colSums(is.na(data)))
# Arrival_Delay_in_Minutes has na values, proportion of na values
prop.table(table(is.na(data$Arrival_Delay_in_Minutes)))
# na values are only 0.03% of the data -> drop na values
# Check for missing values in "Arrival_Delay_in_Minutes"
sum(is.na(data$Arrival_Delay_in_Minutes))
data$Arrival_Delay_in_Minutes[is.na(data$Arrival_Delay_in_Minutes)] <- 0
# list features with na values
prop.table(colSums(is.na(data)))
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(correlation)
library(reshape)
library(reshape2)
library(tidyverse) # for data manipulation
library(ggplot2) # for plotting
library(gridExtra) # for grid.arrange
library(regclass) # for VIF package
library(MLmetrics) # to create confusion matrix
library(pROC) # for ROC Curve
library(e1071) # for Naive Bayes Classifier
library(class)
library(caret)
library(glmnet) # for Lasso Regression
data_train = read.csv("train.csv")
data_test = read.csv("test.csv")
# merge train and test data
data = rbind(data_train, data_test)
attach(data)
summary(data)
prop.table(table(data$satisfaction))
table(data$Gender)
table(data$Customer.Type)
table(data$Type.of.Travel)
table(data$Class)
table(data$satisfaction)
# replace dots with underscores in column names
names(data) = gsub("\\.", "_", names(data))
# drop X and id column
data = data %>% select(-X, -id)
names(data)
# convert categorical features to factor
data$Gender = as.factor(data$Gender)
data$Customer_Type = as.factor(data$Customer_Type)
data$Type_of_Travel = as.factor(data$Type_of_Travel)
data$Class = as.factor(data$Class)
data$satisfaction = as.factor(data$satisfaction)
data$Arrival_Delay_in_Minutes <- as.numeric(data$Arrival_Delay_in_Minutes)
ratings_fts_names = c("Inflight_wifi_service", "Departure_Arrival_time_convenient",
"Ease_of_Online_booking", "Gate_location", "Food_and_drink", "Online_boarding",
"Seat_comfort", "Inflight_entertainment", "On_board_service", "Leg_room_service",
"Baggage_handling", "Checkin_service", "Inflight_service", "Cleanliness", "On_board_service")
for (col in ratings_fts_names) {
data[[col]] = as.factor(data[[col]])
}
# list features with na values
prop.table(colSums(is.na(data)))
# na values are only 0.03% of the data -> drop na values
# Check for missing values in "Arrival_Delay_in_Minutes"
# Check if there are any NA values in the "Arrival_Delay_in_Minutes" column
print(sum(is.na(data$Arrival_Delay_in_Minutes)))
# Impute missing values with 0
data$Arrival_Delay_in_Minutes[is.na(data$Arrival_Delay_in_Minutes)] <- 0
# Check again for any NA values in the "Arrival_Delay_in_Minutes" column
print(sum(is.na(data$Arrival_Delay_in_Minutes)))
# Check the proportion of NA values in the entire dataset
prop.table(colSums(is.na(data)))
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(correlation)
library(reshape)
library(reshape2)
library(tidyverse) # for data manipulation
library(ggplot2) # for plotting
library(gridExtra) # for grid.arrange
library(regclass) # for VIF package
library(MLmetrics) # to create confusion matrix
library(pROC) # for ROC Curve
library(e1071) # for Naive Bayes Classifier
library(class)
library(caret)
library(glmnet) # for Lasso Regression
data_train = read.csv("train.csv")
data_test = read.csv("test.csv")
# merge train and test data
data = rbind(data_train, data_test)
attach(data)
summary(data)
prop.table(table(data$satisfaction))
table(data$Gender)
table(data$Customer.Type)
table(data$Type.of.Travel)
table(data$Class)
table(data$satisfaction)
# replace dots with underscores in column names
names(data) = gsub("\\.", "_", names(data))
# drop X and id column
data = data %>% select(-X, -id)
names(data)
# convert categorical features to factor
data$Gender = as.factor(data$Gender)
data$Customer_Type = as.factor(data$Customer_Type)
data$Type_of_Travel = as.factor(data$Type_of_Travel)
data$Class = as.factor(data$Class)
data$satisfaction = as.factor(data$satisfaction)
data$Arrival_Delay_in_Minutes <- as.numeric(data$Arrival_Delay_in_Minutes)
ratings_fts_names = c("Inflight_wifi_service", "Departure_Arrival_time_convenient",
"Ease_of_Online_booking", "Gate_location", "Food_and_drink", "Online_boarding",
"Seat_comfort", "Inflight_entertainment", "On_board_service", "Leg_room_service",
"Baggage_handling", "Checkin_service", "Inflight_service", "Cleanliness", "On_board_service")
for (col in ratings_fts_names) {
data[[col]] = as.factor(data[[col]])
}
# list features with na values
prop.table(colSums(is.na(data)))
View(data)
