# scatter plot of Arrival_Delay_in_Minutes and Departure_Delay_in_Minutes
plot(arrival_std, departure_std, xlab = "Arrival_Delay_in_Minutes", ylab = "Departure_Delay_in_Minutes")
# plot line y = x
abline(0, 1, col = "red")
# print table of type of travel by satisfacton
table(data$Type_of_Travel, data$satisfaction)
# select examples of departure delay greater than 500
examples=data[data$Departure_Delay_in_Minutes > 800,]
# and print table of satisfaction by departure delay
table(examples$satisfaction)
# count the number of examples with departure delay = 0
sum(data$Departure_Delay_in_Minutes > 0)
sum(data$Departure_Delay_in_Minutes <= 0)
sum(data$Arrival_Delay_in_Minutes > 0)
sum(data$Arrival_Delay_in_Minutes <= 0)
summary(data)
tinytex::install_tinytex()
latex
install.packages('tinytex')
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("xfun")
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(correlation)
library(reshape)
library(reshape2)
data_train = read.csv("train.csv")
data_test = read.csv("test.csv")
# merge train and test data
data = rbind(data_train, data_test)
attach(data)
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(correlation)
library(reshape)
library(reshape2)
data_train = read.csv("train.csv")
data_test = read.csv("test.csv")
# merge train and test data
data = rbind(data_train, data_test)
attach(data)
# Print summary for each variable grouped by satisfaction, including the name of the variable
for (col in names(data)) {
print(col)
print(by(data[[col]], data$satisfaction, summary))
}
# print names of the columns
names(data)
# replace dots with underscores in column names
names(data) = gsub("\\.", "_", names(data))
# drop X and id column
data = data %>% select(-X, -id)
names(data)
# convert categorical features to factor
data$Gender = factor(data$Gender, levels = c("Male", "Female"))
data$Customer_Type = factor(data$Customer_Type, levels = c("Loyal Customer", "disloyal Customer"))
data$Type_of_Travel = factor(data$Type_of_Travel, levels = c("Personal Travel", "Business travel"))
data$Class = factor(data$Class, levels = c("Business", "Eco Plus", "Eco"))
data$satisfaction = factor(data$satisfaction, levels = c("neutral or dissatisfied", "satisfied"))
# list features with na values
prop.table(colSums(is.na(data)))
# Arrival_Delay_in_Minutes has na values, proportion of na values
prop.table(table(is.na(data$Arrival_Delay_in_Minutes)))
# na values are only 0.03% of the data -> drop na values
data = data %>% drop_na(Arrival_Delay_in_Minutes)
# plot boxplot of numeric variables
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
plot = ggplot(data, aes(x = .data[[col]])) +
geom_boxplot() +
labs(title = col, x = col, y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 3)
# plot boxplot against satisfaction with colors
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
plot = ggplot(data, aes(x = satisfaction, y = .data[[col]], fill = satisfaction)) +
geom_boxplot() +
labs(title = col, x = "Satisfaction", y = col)
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# plot pie chart for each variable
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
plot = ggplot(data, aes(x = "", fill = .data[[col]])) +
geom_bar(width = 1) +
coord_polar("y", start = 0) +
labs(title = paste("Pie Chart of", col))
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 3)
# plot distribution of categorical variables
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
plot = ggplot(data, aes(x = .data[[col]], fill = .data[[col]])) +
geom_bar() +
labs(title = paste("Histogram of", col), x = col, y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# plot distribution of numeric variables
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
plot = ggplot(data, aes(x = .data[[col]])) +
geom_histogram(binwidth = 0.5) +
labs(title = col, x = col, y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 3)
# plots categorical variables vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
if (col == "satisfaction") {
next
}
plot = ggplot(data, aes(x = satisfaction, fill = .data[[col]])) +
geom_bar(position = "dodge") +
scale_fill_manual(values = rainbow(length(unique(data[[col]]))),
labels = unique(data[[col]]),
name = col) +
labs(title = paste("Histogram of Satisfaction by", col), x = "Satisfaction", y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# Create density plots for Age and Flight_Distance
plots = list()
for (col in c("Age", "Flight_Distance")) {
plot = ggplot(data, aes(x = .data[[col]], fill = satisfaction)) +
geom_density(alpha = 0.4) +
labs(title = paste("Density Plot of", col), x = col, y = "Density")
plots[[col]] = plot
}
# Arrange the density plots in a grid
grid.arrange(grobs = plots)
# plots numeric variables vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
if (col == "satisfaction") {
next
}
plot = ggplot(data, aes(x = satisfaction, y = .data[[col]])) +
geom_boxplot() +
labs(x = "Satisfaction", y = col)
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 4)
data$Gender = as.numeric(data$Gender) - 1
data$Customer_Type = as.numeric(data$Customer_Type) - 1
data$Type_of_Travel = as.numeric(data$Type_of_Travel) - 1
data$Class = as.numeric(data$Class) - 1
data$satisfaction = as.numeric(data$satisfaction) - 1
prop.table(table(data$satisfaction))
set.seed(123)
train_index = sample(1:nrow(data), 0.8*nrow(data))
# 80% of data is used for training
train = data[train_index,]
# 20% of data is used for testing
test = data[-train_index,]
# merge train and test data
data = rbind(train, test)
#save on cvs
write.csv(data, file = "data.csv")
setwd("C:/Users/giaco/Desktop/sl/project")
# Arrival_Delay_in_Minutes has na values, proportion of na values
prop.table(table(is.na(data$Arrival_Delay_in_Minutes)))
# na values are only 0.03% of the data -> drop na values
data = data %>% drop_na(Arrival_Delay_in_Minutes)
# plot boxplot of numeric variables
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
plot = ggplot(data, aes(x = .data[[col]])) +
geom_boxplot() +
labs(title = col, x = col, y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 3)
set.seed(123)
train_index = sample(1:nrow(data), 0.8*nrow(data))
# 80% of data is used for training
train = data[train_index,]
# 20% of data is used for testing
test = data[-train_index,]
# merge train and test data
data = rbind(train, test)
#save on cvs
write.csv(data, file = "data.csv")
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(correlation)
library(reshape)
library(reshape2)
data_train = read.csv("train.csv")
data_test = read.csv("test.csv")
# merge train and test data
data = rbind(data_train, data_test)
attach(data)
# Print summary for each variable grouped by satisfaction, including the name of the variable
for (col in names(data)) {
print(col)
print(by(data[[col]], data$satisfaction, summary))
}
# print names of the columns
names(data)
# replace dots with underscores in column names
names(data) = gsub("\\.", "_", names(data))
# drop X and id column
data = data %>% select(-X, -id)
names(data)
# convert categorical features to factor
data$Gender = factor(data$Gender, levels = c("Male", "Female"))
data$Customer_Type = factor(data$Customer_Type, levels = c("Loyal Customer", "disloyal Customer"))
data$Type_of_Travel = factor(data$Type_of_Travel, levels = c("Personal Travel", "Business travel"))
data$Class = factor(data$Class, levels = c("Business", "Eco Plus", "Eco"))
data$satisfaction = factor(data$satisfaction, levels = c("neutral or dissatisfied", "satisfied"))
# list features with na values
prop.table(colSums(is.na(data)))
# Arrival_Delay_in_Minutes has na values, proportion of na values
prop.table(table(is.na(data$Arrival_Delay_in_Minutes)))
# na values are only 0.03% of the data -> drop na values
data = data %>% drop_na(Arrival_Delay_in_Minutes)
# plot boxplot of numeric variables
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
plot = ggplot(data, aes(x = .data[[col]])) +
geom_boxplot() +
labs(title = col, x = col, y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 3)
# plot boxplot against satisfaction with colors
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
plot = ggplot(data, aes(x = satisfaction, y = .data[[col]], fill = satisfaction)) +
geom_boxplot() +
labs(title = col, x = "Satisfaction", y = col)
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# plot pie chart for each variable
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
plot = ggplot(data, aes(x = "", fill = .data[[col]])) +
geom_bar(width = 1) +
coord_polar("y", start = 0) +
labs(title = paste("Pie Chart of", col))
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 3)
# plot distribution of categorical variables
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
plot = ggplot(data, aes(x = .data[[col]], fill = .data[[col]])) +
geom_bar() +
labs(title = paste("Histogram of", col), x = col, y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# plot distribution of numeric variables
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
plot = ggplot(data, aes(x = .data[[col]])) +
geom_histogram(binwidth = 0.5) +
labs(title = col, x = col, y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 3)
# plots categorical variables vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
if (col == "satisfaction") {
next
}
plot = ggplot(data, aes(x = satisfaction, fill = .data[[col]])) +
geom_bar(position = "dodge") +
scale_fill_manual(values = rainbow(length(unique(data[[col]]))),
labels = unique(data[[col]]),
name = col) +
labs(title = paste("Histogram of Satisfaction by", col), x = "Satisfaction", y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# Create density plots for Age and Flight_Distance
plots = list()
for (col in c("Age", "Flight_Distance")) {
plot = ggplot(data, aes(x = .data[[col]], fill = satisfaction)) +
geom_density(alpha = 0.4) +
labs(title = paste("Density Plot of", col), x = col, y = "Density")
plots[[col]] = plot
}
# Arrange the density plots in a grid
grid.arrange(grobs = plots)
# plots numeric variables vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
if (col == "satisfaction") {
next
}
plot = ggplot(data, aes(x = satisfaction, y = .data[[col]])) +
geom_boxplot() +
labs(x = "Satisfaction", y = col)
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 4)
data$Gender = as.numeric(data$Gender) - 1
data$Customer_Type = as.numeric(data$Customer_Type) - 1
data$Type_of_Travel = as.numeric(data$Type_of_Travel) - 1
data$Class = as.numeric(data$Class) - 1
data$satisfaction = as.numeric(data$satisfaction) - 1
prop.table(table(data$satisfaction))
set.seed(123)
train_index = sample(1:nrow(data), 0.8*nrow(data))
# 80% of data is used for training
train = data[train_index,]
# 20% of data is used for testing
test = data[-train_index,]
# merge train and test data
data = rbind(train, test)
#save on cvs
write.csv(data, file = "data.csv")
knitr::opts_chunk$set(echo = TRUE)
# import libraries
library(tidyverse)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(correlation)
library(reshape)
library(reshape2)
data_train = read.csv("train.csv")
data_test = read.csv("test.csv")
# merge train and test data
data = rbind(data_train, data_test)
attach(data)
# Print summary for each variable grouped by satisfaction, including the name of the variable
for (col in names(data)) {
print(col)
print(by(data[[col]], data$satisfaction, summary))
}
# print names of the columns
names(data)
# replace dots with underscores in column names
names(data) = gsub("\\.", "_", names(data))
# drop X and id column
data = data %>% select(-X, -id)
names(data)
# convert categorical features to factor
data$Gender = factor(data$Gender, levels = c("Male", "Female"))
data$Customer_Type = factor(data$Customer_Type, levels = c("Loyal Customer", "disloyal Customer"))
data$Type_of_Travel = factor(data$Type_of_Travel, levels = c("Personal Travel", "Business travel"))
data$Class = factor(data$Class, levels = c("Business", "Eco Plus", "Eco"))
data$satisfaction = factor(data$satisfaction, levels = c("neutral or dissatisfied", "satisfied"))
# list features with na values
prop.table(colSums(is.na(data)))
# Arrival_Delay_in_Minutes has na values, proportion of na values
prop.table(table(is.na(data$Arrival_Delay_in_Minutes)))
# na values are only 0.03% of the data -> drop na values
data = data %>% drop_na(Arrival_Delay_in_Minutes)
# plot boxplot of numeric variables
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
plot = ggplot(data, aes(x = .data[[col]])) +
geom_boxplot() +
labs(title = col, x = col, y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 3)
# plot boxplot against satisfaction with colors
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
plot = ggplot(data, aes(x = satisfaction, y = .data[[col]], fill = satisfaction)) +
geom_boxplot() +
labs(title = col, x = "Satisfaction", y = col)
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# plot pie chart for each variable
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
plot = ggplot(data, aes(x = "", fill = .data[[col]])) +
geom_bar(width = 1) +
coord_polar("y", start = 0) +
labs(title = paste("Pie Chart of", col))
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 3)
# plot distribution of categorical variables
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
plot = ggplot(data, aes(x = .data[[col]], fill = .data[[col]])) +
geom_bar() +
labs(title = paste("Histogram of", col), x = col, y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# plot distribution of numeric variables
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
plot = ggplot(data, aes(x = .data[[col]])) +
geom_histogram(binwidth = 0.5) +
labs(title = col, x = col, y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 3)
# plots categorical variables vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.factor)]) {
if (col == "satisfaction") {
next
}
plot = ggplot(data, aes(x = satisfaction, fill = .data[[col]])) +
geom_bar(position = "dodge") +
scale_fill_manual(values = rainbow(length(unique(data[[col]]))),
labels = unique(data[[col]]),
name = col) +
labs(title = paste("Histogram of Satisfaction by", col), x = "Satisfaction", y = "Count")
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 2)
# Create density plots for Age and Flight_Distance
plots = list()
for (col in c("Age", "Flight_Distance")) {
plot = ggplot(data, aes(x = .data[[col]], fill = satisfaction)) +
geom_density(alpha = 0.4) +
labs(title = paste("Density Plot of", col), x = col, y = "Density")
plots[[col]] = plot
}
# Arrange the density plots in a grid
grid.arrange(grobs = plots)
# plots numeric variables vs satisfaction
plots = list()
for (col in names(data)[sapply(data, is.numeric)]) {
if (col == "satisfaction") {
next
}
plot = ggplot(data, aes(x = satisfaction, y = .data[[col]])) +
geom_boxplot() +
labs(x = "Satisfaction", y = col)
plots[[col]] = plot
}
grid.arrange(grobs = plots, ncol = 4)
data$Gender = as.numeric(data$Gender) - 1
data$Customer_Type = as.numeric(data$Customer_Type) - 1
data$Type_of_Travel = as.numeric(data$Type_of_Travel) - 1
data$Class = as.numeric(data$Class) - 1
data$satisfaction = as.numeric(data$satisfaction) - 1
prop.table(table(data$satisfaction))
set.seed(123)
train_index = sample(1:nrow(data), 0.8*nrow(data))
# 80% of data is used for training
train = data[train_index,]
# 20% of data is used for testing
test = data[-train_index,]
# merge train and test data
data = rbind(train, test)
#save on cvs
write.csv(data, file = "data.csv")
set.seed(123)
train_index = sample(1:nrow(data), 0.8*nrow(data))
# 80% of data is used for training
train = data[train_index,]
# 20% of data is used for testing
test = data[-train_index,]
# merge train and test data
data = rbind(train, test)
#save on cvs
write.csv(data, file = "test.csv")
setwd("C:/Users/giaco/Desktop/sl/project")
set.seed(123)
train_index = sample(1:nrow(data), 0.8*nrow(data))
# 80% of data is used for training
train = data[train_index,]
# 20% of data is used for testing
test = data[-train_index,]
# merge train and test data
data = rbind(train, test)
#save on cvs
write.csv(data, file = "data.csv")
set.seed(123)
train_index = sample(1:nrow(data), 0.8*nrow(data))
# 80% of data is used for training
train = data[train_index,]
# 20% of data is used for testing
test = data[-train_index,]
# merge train and test data
data = rbind(train, test)
#save on cvs
write.csv(data, file = "data.csv")
set.seed(123)
train_index = sample(1:nrow(data), 0.8*nrow(data))
# 80% of data is used for training
train = data[train_index,]
# 20% of data is used for testing
test = data[-train_index,]
# merge train and test data
data = rbind(train, test)
#save on cvs
write.csv(data, "data.csv")
getwd()
